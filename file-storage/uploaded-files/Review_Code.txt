	


{% load crispy_forms_tags %}

<!-- Modal -->
<div class="modal modal-blur fade" id="review-modal-{{ upload_bin.id }}" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
		<form 
			autocomplete="off" 
			id="review-upload-form-{{ upload_bin.id }}"
			class="modal-content">

			<div class="modal-header">
				<h1 class="modal-title">Review Evidence</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div = class="row row-cards">

					<div class="col">
						<div class="card" style="height: 28rem">
							<div class="card-body card-body-scrollable card-body-scrollable-shadow">
								<div class="divide-y">


									{% for uploaded_record in uploaded_records %}
										{% if upload_bin.id == uploaded_record.upload_bin_id %}
											<div>
												<div class="row">
												<div class="col-auto">
													<span class="avatar">
														<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-pdf" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
															<path stroke="none" d="M0 0h24v24H0z" fill="none" />
															<path d="M10 8v8h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-2z" />
															<path d="M3 12h2a2 2 0 1 0 0 -4h-2v8" />
															<path d="M17 12h3" />
															<path d="M21 8h-4v8" />
														</svg>
													</span>
												</div>
												<div class="col">
													<div class="">
													<strong>{{ uploaded_record.uploaded_by.first_name }} {{ uploaded_record.uploaded_by.last_name }}</strong> submitted 
													
													<a href="#" class="" data-bs-dismiss="modal" data-bs-toggle="modal" data-bs-target="#file-modal-{{ uploaded_record.id  }}">								
															{{ uploaded_record.file_name }}
													</a>
													</div>
													<div class="text-muted">{{ uploaded_record.uploaded_at|date:"F j, Y g:i A" }}</div>
												</div>
												<div class="col-auto align-self-center">
													<div class="badge bg-primary"></div>
												</div>
												</div>
											</div>
										{% endif %}
									{% endfor %}
								
								</div>
							</div>
						</div>

					</div>

					<div class="col">
						<div class="card"  style="height: 28rem">
							<div class="card-body">

									<div class="mb-3">
										<label class="form-label required">{{ review_form.status.label }}</label>
										{{ review_form.status }}
									</div>

									<div class="mb-3">
										<label class="form-label">{{ review_form.remarks.label }}</label>
										<textarea class="form-control" id="id_remarks" name="remarks" placeholder="Input your remarks here..."
										style="height: 15rem"></textarea>
									</div>
							
							</div>
						</div>
					</div>	
				</div>
				
			</div>
			<div class="modal-footer">
				<button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
				<button type="button" data-id="{{ upload_bin.id }}" class="btn btn-primary review-upload-button">Submit</button>
			</div>

		</form>
	</div>
</div>

{% for uploaded_record in uploaded_records %}
	{% if upload_bin.id == uploaded_record.upload_bin_id %}
		{% include "accreditation-page/instrument-component/main-page/file-view-modal.html" %}
	{% endif %}
{% endfor %}





views.py:
@login_required
@permission_required("Accreditation.change_component_upload_bin", raise_exception=True)
def create_review(request, pk):
# Retrieve the type object with the given primary key (pk)
    try:
        upload_bin = component_upload_bin.objects.get(id=pk)
    except component_upload_bin.DoesNotExist:
        return JsonResponse({'errors': 'Upload Bin not found'}, status=404)

    if request.method == 'POST':
        # Process the form submission with updated data
        review_form = ReviewUploadBin_Form(request.POST or None, instance=upload_bin)
        if review_form.is_valid():
            # Save the updated data to the database
            review_form.instance.modified_by = request.user
            review_form.instance.reviewed_by = request.user
            review_form.instance.reviewed_at = timezone.now()
            review_form.save()  


        # -------------------------------- [ CALCULATING THE PROGRESS PERCENTAGE FOR COMPONENTS] -------------------------------------
            # Get the component record directly using the parameter_component_id
            component_id = upload_bin.parameter_component_id
            component_record = parameter_components.objects.select_related('area_parameter').get(id=component_id)

            # Count all and approved upload bins for the component that are NOT soft deleted
            all_upload_bins = component_upload_bin.objects.filter(parameter_component_id=component_id, is_deleted=False).count()
            approve_upload_bins = component_upload_bin.objects.filter(parameter_component_id=component_id, status="approve", is_deleted=False).count()

            # Calculate progress for the component
            progress = 0.00
            progress = (approve_upload_bins / all_upload_bins) * 100

            # Update the progress_percentage field of the component record
            component_record.progress_percentage = progress
            component_record.save()

            print("Component Progress:", progress)


        # -------------------------------- [ CALCULATING THE PROGRESS PERCENTAGE FOR PARAMETERS] -------------------------------------
            # Get the component record directly using the parameter_component_id

            # Get all child parameter_components of the parent area_parameter
            area_parameter_id = component_record.area_parameter_id

            # Get the parameter record
            parameter_record = level_area_parameter.objects.get(id=area_parameter_id)

            # Count all and approved upload bins for all child parameter components of a parameter that are NOT soft deleted
            area_parameter_components = parameter_components.objects.filter(area_parameter_id=area_parameter_id, is_deleted=False)
            all_parameter_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, is_deleted=False).count()
            approved_parameter_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, status="approve", is_deleted=False).count()

            # Calculate progress for the parameter
            progress = 0.00
            progress = (approved_parameter_bins / all_parameter_bins) * 100

            # Update the progress_percentage field of the parameter record
            parameter_record.progress_percentage = progress
            parameter_record.save()

            print("Parameter Progress:", progress)

# ----------------------------------[ Calculating the progress percentage per each instrument_areas ]--------------------------------------
            
            # Get the area record
            area_record = instrument_level_area.objects.select_related('instrument_level').get(id=parameter_record.instrument_level_area_id)

            # Get all child parameters of the area that are not soft deleted
            area_parameters = level_area_parameter.objects.filter(instrument_level_area_id=area_record.id, is_deleted=False)

            # Initialize counters
            all_area_bins = 0
            approved_area_bins = 0

            # Iterate through each parameter
            for parameter in area_parameters:
                # Get all child parameter_components of the parameter that are NOT soft deleted
                area_parameter_components = parameter_components.objects.filter(area_parameter_id=parameter.id, is_deleted=False)

                # Count all and approved bins for each component that are not soft deleted
                all_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, is_deleted=False).count()
                approved_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, status="approve", is_deleted=False).count()

                # Increment counters
                all_area_bins += all_bins
                approved_area_bins += approved_bins

            # Calculate progress
            progress = 0.00
            progress = (approved_area_bins / all_area_bins) * 100

            # Update the progress_percentage field of the area record
            area_record.progress_percentage = progress
            area_record.save()

  #----------------[ Codes for calculating program percentage of the program accreditation/ instument_level ]----------------

            instrument_id = area_record.instrument_level.id
            instrument_record = instrument_level.objects.get(id = instrument_id)

            # Get all child areas of the program accreditation/ instrument level
            areas = instrument_level_area.objects.filter(instrument_level=instrument_record, is_deleted=False)

            # Initialize counters
            all_area_bins = 0
            approved_area_bins = 0
            for area_record in areas:
                # Get all child parameters of the area
                area_parameters = level_area_parameter.objects.filter(instrument_level_area_id=area_record.id, is_deleted=False)

                # Iterate through each parameter
                for parameter in area_parameters:
                    # Get all child parameter_components of the parameter
                    area_parameter_components = parameter_components.objects.filter(area_parameter_id=parameter.id, is_deleted=False)

                    # Count all and approved bins for each component
                    all_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, is_deleted=False).count()
                    approved_bins = component_upload_bin.objects.filter(parameter_component__in=area_parameter_components, status="approve", is_deleted=False).count()

                    # Increment counters
                    all_area_bins += all_bins
                    approved_area_bins += approved_bins

            # Calculate progress
            progress = 0.00
            progress = (approved_area_bins / all_area_bins) * 100
            print("Progress: ", progress)
            # Update the progress_percentage field of the area record
            instrument_record.progress_percentage = progress
            instrument_record.save()
            

        # Provide a success message as a JSON response
        messages.success(request, f'Upload Bin is successfully reviewed!') 
        return JsonResponse({'status': 'success'}, status=200)

    else:
        # Return a validation error as a JSON response
        return JsonResponse({'errors': review_form.errors}, status=400)
     

FORM.PY   

# ---------------------------- [ REVIEW UPLOAD BIN FORM ] ---------------------------- #
class ReviewUploadBin_Form(forms.ModelForm):
    STATUS_CHOICES = [
            ('approve', 'Approve'), 
            ('rfr', 'Request for Resubmission')
        ]   
    
    status = forms.ChoiceField(
        label = "Status", 
        choices = STATUS_CHOICES,
        required = True, 
        error_messages={'required': "Please select a status before submitting the form."},
        widget=forms.Select(attrs={'class': 'form-control form-select select'}))


    
    class Meta:
        model = component_upload_bin
        fields = ('status', 'remarks')

    widgets = {
        'remarks': forms.Textarea(attrs={'required': False}),
        }

